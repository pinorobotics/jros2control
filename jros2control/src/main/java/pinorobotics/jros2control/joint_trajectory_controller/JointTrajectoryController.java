/*
 * Copyright 2024 jroscontrol project
 * 
 * Website: https://github.com/pinorobotics/jros2control
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package pinorobotics.jros2control.joint_trajectory_controller;

import id.jros2messages.trajectory_msgs.JointTrajectoryMessage;
import id.jrosclient.JRosClient;
import id.jrosclient.TopicSubscriber;
import id.xfunction.Preconditions;
import id.xfunction.logging.XLogger;
import id.xfunction.util.IdempotentService;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.Flow.Subscription;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import pinorobotics.jros2control.joint_trajectory_controller.JointStateListener.JointState;

/**
 * Joint Trajectory Controller
 *
 * <p>Every time {@link JointTrajectoryController} receives new trajectory from ROS nodes, it
 * process all the states through which joints must travel to execute such trajectory. Each of these
 * states are sent to {@link JointStateListener} in same order as they present in the trajectory.
 *
 * <p>Difference between this controller and ROS2 standard joint_trajectory_controller:
 *
 * <ul>
 *   <li>No interpolation of waypoints in time
 *   <li>Supports only positions (velocities, accelerations, efforts are ignored)
 * </ul>
 *
 * @see <a
 *     href="https://control.ros.org/master/doc/ros2_controllers/joint_trajectory_controller/doc/userdoc.html">joint_trajectory_controller</a>
 * @author lambdaprime intid@protonmail.com
 */
public class JointTrajectoryController extends IdempotentService {
    private static final XLogger LOGGER = XLogger.getLogger(JointTrajectoryController.class);
    private Optional<TopicSubscriber<JointTrajectoryMessage>> subscriber = Optional.empty();
    private List<String> joints;
    private List<Double> initialPositions;
    private String jointTrajectoryTopic;
    private JRosClient client;
    private List<JointStateListener> jointStateListener;
    private Map<String, Integer> jointsMap;

    /**
     * @param joints list of joints which states will be published. It can be taken from
     *     ros2_controllers.yaml which is usually generated by MoveIt Setup Assistant
     * @param initialPositions joint initial positions. It can be taken from initial_positions.yaml
     *     which is usually generated by MoveIt Setup Assistant
     * @param jointTrajectoryTopic topic from which this controller will receive trajectories
     */
    public JointTrajectoryController(
            JRosClient client,
            List<JointStateListener> jointStateListener,
            List<String> joints,
            List<Double> initialPositions,
            String jointTrajectoryTopic) {
        Preconditions.equals(
                joints.size(),
                initialPositions.size(),
                "mismatch between joints and number of positions");
        this.client = client;
        this.jointStateListener = jointStateListener;
        this.joints = joints;
        this.initialPositions = initialPositions;
        this.jointTrajectoryTopic = jointTrajectoryTopic;
        this.jointsMap =
                IntStream.range(0, joints.size())
                        .boxed()
                        .collect(Collectors.toMap(i -> joints.get(i), i -> i));
    }

    @Override
    protected void onClose() {
        subscriber.flatMap(TopicSubscriber::getSubscription).ifPresent(Subscription::cancel);
    }

    @Override
    protected void onStart() {
        var positions = initialPositions.stream().mapToDouble(j -> j).toArray();
        updatePositions(positions);
        var subscriber =
                new TopicSubscriber<>(JointTrajectoryMessage.class, jointTrajectoryTopic) {
                    @Override
                    public void onNext(JointTrajectoryMessage item) {
                        super.onNext(item);
                        LOGGER.info("Received new trajectory {0}", item);
                        for (var p : item.points) {
                            for (int i = 0; i < p.positions.length; i++) {
                                if (!Double.isFinite(p.positions[i])) continue;
                                positions[jointsMap.get(item.joint_names[i].data)] = p.positions[i];
                            }
                        }
                        updatePositions(positions);
                        // request next message
                        getSubscription().get().request(1);
                    }
                };
        // register a new subscriber with default QOS policies
        // users can redefine QOS policies using overloaded version of subscribe() method
        client.subscribe(subscriber);
        this.subscriber = Optional.of(subscriber);
    }

    private void updatePositions(double[] positions) {
        jointStateListener.forEach(
                listener -> {
                    try {
                        listener.update(new JointState(positions, new double[0]));
                    } catch (Exception e) {
                        LOGGER.severe(e);
                    }
                });
    }
}
